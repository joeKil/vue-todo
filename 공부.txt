[리팩토링] 할 일 추가 기능
- todoinput에서 add하는 부분에 대해서 app.vue에 옮기는 작업을 해보자
- 추가가 바로됨.. 기존에서는 인풋에서만 행위를 했기 때문에.. 리스트라던지 전달이 안됐었는데
app.vue에서 하는 건 이벤트를 받아서 저장해주고 배열에 반응해준다. 인풋이 프레젠트가 되고, app.vue가 컨테이너가 됨.
리스트의 내용도 그대로 반영이 된다. todoItems로 동일하게 관리 되고있어서.


[리팩토링] 할 일 삭제 기능
- TodoList보면 프롭스데이터를 프롭스 속성으로 내림
 기존에 투두리스트가 갖고있었떤 할일 목록에 데이터들 배열을 app.vue로 올리고
 app.vue가 받아서 프롭스로 올림.
 투두리스트가 기존에 갖고있던 메서드들은 동작을 제대로하지않음.
 그렇기 때문에 투두리스트에서는 최대한 표현만하고 (이벤트 던지거나..)

[리팩토링] 할 일 완료
- 이벤트버스로 todoitem을 넘겨줌. 다시 위로 보냄..
다시 올려서 그걸 안티패턴이라고함..rt?안티?
앱.뷰라는 파일이 컨테이너의 성격을 갖고있기 때문에
todoItems로 접근해서 조작을 하는게 좋음

[리팩토링] 할 일 모두 삭제 기능
전체적으로 app.vue에는 이벤트발생으로 처리한다..

[리팩토링이 완료된 애플리케이션 정리]
app.vue에 많이 생긴 이유는..
각각의 컴포넌트에서 고유 데이터들을 관리하고 있었지만
각각의 컴포넌트들이 동일한 성질을 지니고 있기 때문에 한 개의 컴포넌트로 모아서 그 컴포넌트에서 조작이 모두 일어나는
하위 4개 컴포넌트들은.. 모두 프레젠테이셔널 컴포넌트가 됨.. ui적으로 표현만 함.. 데이터는 컨테이너컴포넌트에서 처리함..
일반적인 설계 방식중에 여러 방식이 있는데.. 이 것도 한가지..
인풋, 리스트 재사용하려면 각각 조작하는 것들을 분리해야함..
지금한건 중앙관리자같은 설계..

사용자경험 : 어떤게 지워졌고, 어떤게 추가됐는지 육안으로 확인하기 어려움

[모달 컴포넌트 등록]
트렌지션 효과 : 뷰에서는 에니메이션과 트렌지션을 코어 라이브러리로 제공 중.

모달 재사용성 작업.
common : 공통으로 사용할 모듈 넣어놓는 곳
slot : 특정 컴포넌트의 일부 UI들을 재사용할 수 있음. vue가 제공한다
각각 슬롯이 있음. 헤더, 바디, 푸터로 되어있음.
이 슬롯이란 영역은 이걸 등록한 컴포넌트에서 저 영역을 다시 정의할 수 있음.

[트렌지션]
부드럽게 나타나고 사라지는 그런 느낌의 효과..
https://vuejs.org/examples/#list-transition < 공식문서는 여기 참고

[강의 중간 정리]
es6 간과 못함..
@click 을 하는게 더 편함..
손이 적게가는게 더 좋음..
es6로 효율적이고 적게 코딩하는 방법..

[ES6 배경과 Babel 소개]
개요
* const & let, Arrow Function, Enhanced Object Literals, Modules 학습
ES6 이크마스크립트.
- 최신 Front-End Framework인 리액트, 앵귤러, 뷰에서 권고하는 언어 형식
기타등등 피처들 스펙들에 대해서 살펴보는 것도 좋다
-ES6의 기능을 지원하지 않는 브라우저가 있으므로 transpiling이 필요. babel이 ES6의 문법을 각 브라우저의 호환 가능한 ES5로 컴파일해줌.

[const & let] 새로운 변수 선언 방식
- 블록단위{}로 변수의 범위가 제한되었음
- const : 한번 선언한 값에 대해서 변경할 수 없음(상수 개념)
- let : 한번 선언한 값에 대해서 다시 선언할 수 있음

[ES5, ES6 특징들]
ES5 특징
Hoisting..
변수를 위한 메모리 공간을 먼저 확보해놓음.. (함수선언식만 해당)

var sum = 5;
sum = sum + i;

function sumAllNumbers() {
    // ...
}

var i = 10; < 이게 위로 끌어올려짐
변수선언이랑, 선언문 메모리 할당 먼저, 그 다음이 연산

#1 - 함수 선언식과 변수 선언을 hoisting
var sum;
function sumAllNumbers() {
 // ...
}

#2 - 변수 대입 및 할당
sum = 5;
sum = sum + i;
i = 10;
<호이스팅..>

ES5 특징 - 변수의 Scope
- 기존 자바스크립트는 {} 에 상관없이 스코프가 설정됨
var sum = 0;
for (var i = 1; i <= 5; i++) {
 sum = sum + i;
}
for문이 끝나도 i에 접근이 가능함

ES6 - {} 단위로 변수의 범위가 제한됨
let sum = 0;
for(let i = 1; i <= 5; i++) {
    sum = sum + i;
}
for문 끝나면 i에 접근 안됨.
console.log에 안찍힘.

const로 지정한 값 변경 불가능
const a = 10;
a = 20; // Uncaught TypeError: Assignment to constant variable
하지만 객체나 배열의 내부는 변경할 수 있다.
const a = {};
a.num = 10;
console.log(a);
a안에 있는 num이라는 속성에 10부여 가능

const a = [];
a.push(20);
console.log(a);

- 반복문은 값이 계속 올라가야되기 때문에 let을 써야함.
es6 변수선언이랑 에로우 밖에 안씀 거의..
중급만하면 실무 개발자랑 다를게 없다..

Arrow Function - 화살표 함수
- 함수를 정의할 때 function이라는 키워드를 사용하지 않고 => 로 대체 ( function치기 싫어서 저 두글자로 퉁치겠다 그런..)
- 흔히 사용하는 콜백 함수의 문법을 간결화
추가적으로.. 적은 글자수 이외에도.. 콜백함수에서 스코프가 달라짐..
콜백 함수 안에 들어가는 함수는 스코프가 .. 다름..
콜백에서 에이작스나 axios썼을 때 호출하는 객체의 속성안에 이어지게 씀..

기존
var sum = function(a, b) {
    return a + b;
}
es6

var sum = (a, b) => {
    return a + b;
}

속성 메서드의 축약 특징 설명
- 객체의 속성을 메서드로 사용할 때 function 예약어를 생략하고 생성 가능
var dictionary = {
 words: 100,
}
// es5
 lookup: function() {
    console.log("find words");
 }
// es6
lookup() { <- 이런식으로 예약어 생략 가능
    console.log("find words");
}
};

[Modules - 자바스크립트 모듈화 방법]
- 자바스크립트 모듈 로더 라이브러리(AMD, Commons JS)기능을 js언어 자체에서 지원
- 호출되기 전까지는 코드 실행과 동작을 하지 않는 특징이 있음
es5 기준에서는 모듈화 불가능..
모듈화.. > 특정 기능을 수행하는 한 단위..
하는 이유.. 재사용성 기능들 때문에..

- Vue.js에서 마주칠 default export
인캡슐레이션이라해서 모듈화를 하는 것.

[ Vuex - 상태 관리 라이브러리 ]
- 개요
# 복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리하는 Vuex 라이브러리 소개
# Vuex 라이브러리의 등장 배경인 Flux 패턴 소개
# Vuex 라이브러리의 주요 속성인 state, getters, mutations, actions 학습
# Vuex를 더 쉽게 코딩할 수 있는 방법인 Helper 기능 소개
# Vuex로 프로젝트를 구조화하는 방법과 모듈 구조화 방법 소개

Vuex : React의 Flux패턴에서 기인.

mvc 패턴에서 flux패턴으로 넘어감.

[ Flux와 MVC 패턴 소개 및 Flux 등장 배경 ]

Flux :
    - MVC패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴 - Unidirectional data flow
   패턴 : ( Action > Dispatcher > Model > View )

    1. action : 화면에서 발생하는 이벤트 또는 사용자의 입력
    2. dispatcher : 데이터를 변경하는 방법, 메서드
    3. model, store : 화면에 표시할 데이터
    4. view : 사용자에게 비춰지는 화면

[ Vuex가 필요한 이유, Vuex 컨셉, Vuex 구조 ]
- 복잡한 애플리케이션에서 컴포넌트의 개수가 만하지면 컴포넌트 간에 데이터 전달이 어려워진다.

이벤트버스로 해결?
- 어디서 이벤트를 보냈는지 혹은 어디서 이벤트를 받았는지 알기 어려움
// Login.vue
eventBus.$emit('fetch', loginInfo);

// List.vue
eventBus.$on('display', data => this.displayOnScreen(data));

// Chart.vue
eventBus.$emit('refreshData', chartData);

이런식으로 이벤트버스 통해서 받고 보내고 받고 보내고 할 수도 있음
하지만.. 컴포넌트 간 데이터 전달이 명시적이지 않음.. 불가능함.. 그 데이터를 다 안다는 건..

vuex가 해결할 수 있는 것.
1. mvc패턴에서 발생하는 구조적 오류
2. 컴포넌트 간 데이터 전달 명시
3. 여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제

Vuex 컨셉
State : 컴포넌트 간에 공유하는 데이터 data()
View : 데이터를 표시하는 화면 template
Action : 사용자의 입력에 따라 데이터를 변경하는 methods

Actions > state > view

Vuex 구조
컴포넌트 > 비동기 로직 > 동기 로직 > 상태

vuex를 보통 store라고 말을 한다.
관행적으로 저장하는 폴더가 있음.

[ state와 getters 소개 ]
state : 여러 컴포넌트에 공유되는 데이터 data
getters : 연산된 state 값을 접근하는 속성 computed
mutations : state값을 변경하는 이벤트 로직 methods
- state의 값을 변경할 수 있는 유일한 방법이자 메서드
- mutation은 commit으로 동작 시킴.
actions : 비동기 처리 로직을 선언하는 메서드 aysnc methods
